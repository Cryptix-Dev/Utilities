// NOTICE: androidVersionCode, gitVersion, and semanticVersion depend on access to Git

// TASKS:
//      computeVersions - returns all versions generated by version functions


ext.androidVersionCode = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--first-parent', '--count', 'HEAD'
            standardOutput = code
        }
        return Integer.parseInt(code.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}

ext.gitVersion = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def builder = new String()
        exec {
            commandLine 'git', 'describe', '--always', '--tags', '--dirty'
            standardOutput = stdout
        }
        
        if (stdout.toString().contains('.')) {
            def describeTags = stdout.toString().trim().split('-')
            builder = describeTags[0]
            stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-list', '--tags', '--no-walk', '--max-count=1'
                standardOutput = stdout
            }
            def distance = stdout.toString().trim() + '..HEAD'
            stdout = new ByteArrayOutputStream()
            exec {
                commandLine 'git', 'rev-list', distance, '--count'
                standardOutput = stdout
            }
            builder = "${builder}.${stdout.toString().trim()}-${describeTags[2].substring(1, describeTags[2].length())}"
            if (describeTags.size() == 4) {
                builder = "${builder}-dirty"
            }
        } else {
            builder = stdout.toString().trim()
        }
        return builder
    }
    catch (ignored) {
        return "Unkown";
    }
}

ext.semanticVersion = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def builder = new String()
        exec {
            commandLine 'git', 'describe', '--always', '--tags', '--dirty'
            standardOutput = stdout
        }
        
        if (stdout.toString().contains('.')) {
            def describeTags = stdout.toString().trim().split('-')
            builder = "${describeTags[0]}-${describeTags[2].substring(1, describeTags[2].length())}"
            if (describeTags.size() == 4) {
                builder = "${builder}-dirty"
            }
        } else {
            builder = stdout.toString().trim()
        }
        return builder
    }
    catch (ignored) {
        return "Unkown";
    }
}

task computeVersions << {
    println "Android Version Code: ${androidVersionCode()}"
    println "Git Version: ${gitVersion()}"
    println "Semantic Version: ${semanticVersion()}"
}